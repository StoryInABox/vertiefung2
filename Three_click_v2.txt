<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - GLTFloader</title>
        <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <script src="https://threejs.org/build/three.js"></script>
        <script src="https://threejs.org/examples/js/loaders/GLTFLoader.js"></script>
        <script src="https://threejs.org/examples/js/loaders/DRACOLoader.js"></script>
        <script src="https://threejs.org/examples/js/loaders/RGBELoader.js"></script>
        <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
        <style>
            body { 
                margin: 0; 
                overflow: hidden;
            }
            .three-Container{
                width: 100%;
                height: 100vh;
            }
            .play{
                position: absolute;
                right:0;
                margin: 2vw;
                padding: .25vw;
                scale: 200%;
                cursor: pointer;
                z-index: 2;
            }       
        </style>
    </head>
	<body>
        <button class="play"><i class="material-icons">play_circle_outline</i></button>
		<script>

			

			let camera, scene, renderer;

			init();
			render();

			function init() {

				const container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
				camera.position.set( - 1.8, 0.6, 2.7 );

				scene = new THREE.Scene();

				RGBE = new THREE.RGBELoader()
					.setPath( 'Textures/' )
					.load( 'alps_field_1k.hdr', function ( texture ) {

						texture.mapping = THREE.EquirectangularReflectionMapping;

						scene.background = texture;
						scene.environment = texture;

						render();

						// model

						const loader = new THREE.GLTFLoader().setPath( '3dmodel/' );
						loader.load( 'alarm_clock_01_4k_new.gltf', function ( gltf ) {

							scene.add( gltf.scene );

							render();

						} );

					} );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.toneMapping = THREE.ACESFilmicToneMapping;
				renderer.toneMappingExposure = 1;
				renderer.outputEncoding = THREE.sRGBEncoding;
				container.appendChild( renderer.domElement );

                const controls = new THREE.OrbitControls( camera, renderer.domElement );
				controls.addEventListener( 'change', render ); // use if there is no animation loop
				controls.minDistance = 2;
				controls.maxDistance = 10;
				controls.target.set( 0, 0, - 0.2 );
				controls.update();

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();

			}

			//

			function render() {

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>